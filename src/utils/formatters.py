from src.services.jetton import Token, DEXPools
from src.services.nft import NftCollection, NftItem, SelectNftItem
from src.services.app import App


def format_connection(url: str) -> str:
    connection_msg = f'–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è <a href="{url}">—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ QR-–∫–æ–¥–æ–º —Å–≤–µ—Ä—Ö—É'

    return connection_msg


def format_jetton_info(jetton: Token) -> str:
    jetton_info_msg = f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{jetton.name}</b> (<b>{jetton.symbol}</b>)\n'\
                      f'–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <code>{jetton.address.to_str()}</code>\n\n'\
                      f'–û–±—â–∞—è —ç–º–∏—Å—Å–∏—è (Supply): <b>{jetton.supply:.2f}</b>\n'\
                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤: <b>{jetton.holders_count}</b>\n'\

    return jetton_info_msg


def format_dex_pools(dex_pools: DEXPools) -> str:
    dex_pools_msg = '\n\n'.join([
                        f'<b>{pool.name}</b>\n'
                        f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{pool.creation_datetime}</b>\n'
                        f'–¶–µ–Ω–∞ {pool.main_jetton}: üíé<b>{pool.price_native:.4f}</b> (üí≤<b>{pool.price_usd:.4f}</b>)'
                        for pool in dex_pools.pools
                    ])

    return dex_pools_msg


def format_nft_collection(nft_collection: NftCollection) -> str:
    nft_collection_msg = f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{nft_collection.name}</b>\n'\
                         f'–ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏: <code>{nft_collection.address.to_str()}</code>\n'\
                         f'–ê–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: <code>{nft_collection.owner.to_str()}</code>\n\n'\
                         f'{nft_collection.description}\n\n'\
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤: <b>{nft_collection.stats.holders_count}</b>\n'\
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: <b>{nft_collection.stats.items_count}</b>\n'\
                         f'–¶–µ–Ω–∞ —Ñ–ª–æ—Ä–∞: üíé<b>{nft_collection.stats.floor_price}</b>\n'\
                         f'–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: üíé<b>{nft_collection.stats.volume:.2f}</b>\n\n'\
                         f'–°—Å—ã–ª–∫–∏: '\
                         f'{"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" if not nft_collection.socials else nft_collection.socials}'

    return nft_collection_msg


def format_nft_item(nft_item: NftItem) -> str:
    nft_item_msg = f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{nft_item.name}</b>\n'\
                   f'–ö–æ–ª–ª–µ–∫—Ü–∏—è: <b>{nft_item.collection.name}</b>\n\n'\
                   f'–ê–¥—Ä–µ—Å NFT: <code>{nft_item.address.to_str()}</code>\n'\
                   f'–ê–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: <code>{"–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if not nft_item.owner else nft_item.owner_address}</code>'

    return nft_item_msg


def format_dialog_nft_item(nft_item: SelectNftItem) -> str:
    nft_item_msg = f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{nft_item.name}</b>\n'\
                   f'–ê–¥—Ä–µ—Å NFT: <code>{nft_item.address}</code>'

    return nft_item_msg


def format_app(app: App) -> str:
    app_msg = f'\t<b>{app.name}</b>\n\n'\
              f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{app.category.value}</b>\n\n'\
              f'{app.description}'

    return app_msg
